{"version":3,"sources":["bootstrap.js"],"names":["globalThis","factory","exports","module","MonacoBootstrap","this","Module","require","undefined","path","fs","safeGlobals","self","global","vscode","safeProcess","process","globals","safeIpcRenderer","ipcRenderer","Error","stackTraceLimit","on","console","error","enableASARSupport","appRoot","warn","NODE_MODULES_PATH","join","platform","__dirname","substr","NODE_MODULES_ASAR_PATH","originalResolveLookupPaths","_resolveLookupPaths","request","parent","paths","Array","isArray","i","len","length","splice","avoidMonkeyPatchFromAppInsights","env","setupNLS","nlsConfig","availableLanguages","JSON","parse","e","_resolvedLanguagePackCoreLocation","bundles","Object","create","loadBundle","bundle","language","cb","result","async","pathSegments","invoke","promises","readFile","toString","safeReadNlsFile","replace","then","content","json","catch","_corruptedFile","writeFile","safeWriteNlsFile","fileUriFromPath","config","uri","pathName","charAt","isWindows","startsWith","encodeURI","scheme","fallbackAuthority"],"mappings":"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","file":"bootstrap.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n//@ts-check\n'use strict';\n\n// Simple module style to support node.js and browser environments\n(function (globalThis, factory) {\n\n\t// Node.js\n\tif (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t}\n\n\t// Browser\n\telse {\n\t\tglobalThis.MonacoBootstrap = factory();\n\t}\n}(this, function () {\n\tconst Module = typeof require === 'function' ? require('module') : undefined;\n\tconst path = typeof require === 'function' ? require('path') : undefined;\n\tconst fs = typeof require === 'function' ? require('fs') : undefined;\n\n\t//#region global bootstrapping\n\n\t// increase number of stack frames(from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\tError.stackTraceLimit = 100;\n\n\t// Workaround for Electron not installing a handler to ignore SIGPIPE\n\t// (https://github.com/electron/electron/issues/13254)\n\tif (typeof process !== 'undefined') {\n\t\tprocess.on('SIGPIPE', () => {\n\t\t\tconsole.error(new Error('Unexpected SIGPIPE'));\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region Add support for using node_modules.asar\n\n\t/**\n\t * @param {string | undefined} appRoot\n\t */\n\tfunction enableASARSupport(appRoot) {\n\t\tif (!path || !Module || typeof process === 'undefined') {\n\t\t\tconsole.warn('enableASARSupport() is only available in node.js environments'); // TODO@sandbox ASAR is currently non-sandboxed only\n\t\t\treturn;\n\t\t}\n\n\t\tlet NODE_MODULES_PATH = appRoot ? path.join(appRoot, 'node_modules') : undefined;\n\t\tif (!NODE_MODULES_PATH) {\n\t\t\tNODE_MODULES_PATH = path.join(__dirname, '../node_modules');\n\t\t} else {\n\t\t\t// use the drive letter casing of __dirname\n\t\t\tif (process.platform === 'win32') {\n\t\t\t\tNODE_MODULES_PATH = __dirname.substr(0, 1) + NODE_MODULES_PATH.substr(1);\n\t\t\t}\n\t\t}\n\n\t\tconst NODE_MODULES_ASAR_PATH = `${NODE_MODULES_PATH}.asar`;\n\n\t\t// @ts-ignore\n\t\tconst originalResolveLookupPaths = Module._resolveLookupPaths;\n\n\t\t// @ts-ignore\n\t\tModule._resolveLookupPaths = function (request, parent) {\n\t\t\tconst paths = originalResolveLookupPaths(request, parent);\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tfor (let i = 0, len = paths.length; i < len; i++) {\n\t\t\t\t\tif (paths[i] === NODE_MODULES_PATH) {\n\t\t\t\t\t\tpaths.splice(i, 0, NODE_MODULES_ASAR_PATH);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn paths;\n\t\t};\n\t}\n\n\t//#endregion\n\n\n\t//#region URI helpers\n\n\t/**\n\t * @param {string} path\n\t * @param {{ isWindows?: boolean, scheme?: string, fallbackAuthority?: string }} config\n\t * @returns {string}\n\t */\n\tfunction fileUriFromPath(path, config) {\n\n\t\t// Since we are building a URI, we normalize any backlsash\n\t\t// to slashes and we ensure that the path begins with a '/'.\n\t\tlet pathName = path.replace(/\\\\/g, '/');\n\t\tif (pathName.length > 0 && pathName.charAt(0) !== '/') {\n\t\t\tpathName = `/${pathName}`;\n\t\t}\n\n\t\t/** @type {string} */\n\t\tlet uri;\n\n\t\t// Windows: in order to support UNC paths (which start with '//')\n\t\t// that have their own authority, we do not use the provided authority\n\t\t// but rather preserve it.\n\t\tif (config.isWindows && pathName.startsWith('//')) {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}:${pathName}`);\n\t\t}\n\n\t\t// Otherwise we optionally add the provided authority if specified\n\t\telse {\n\t\t\turi = encodeURI(`${config.scheme || 'file'}://${config.fallbackAuthority || ''}${pathName}`);\n\t\t}\n\n\t\treturn uri.replace(/#/g, '%23');\n\t}\n\n\t//#endregion\n\n\n\t//#region NLS helpers\n\n\t/**\n\t * @returns {{locale?: string, availableLanguages: {[lang: string]: string;}, pseudo?: boolean } | undefined}\n\t */\n\tfunction setupNLS() {\n\n\t\t// Get the nls configuration as early as possible.\n\t\tconst process = safeProcess();\n\t\tlet nlsConfig = { availableLanguages: {} };\n\t\tif (process && process.env['VSCODE_NLS_CONFIG']) {\n\t\t\ttry {\n\t\t\t\tnlsConfig = JSON.parse(process.env['VSCODE_NLS_CONFIG']);\n\t\t\t} catch (e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\n\t\tif (nlsConfig._resolvedLanguagePackCoreLocation) {\n\t\t\tconst bundles = Object.create(null);\n\n\t\t\tnlsConfig.loadBundle = function (bundle, language, cb) {\n\t\t\t\tconst result = bundles[bundle];\n\t\t\t\tif (result) {\n\t\t\t\t\tcb(undefined, result);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tsafeReadNlsFile(nlsConfig._resolvedLanguagePackCoreLocation, `${bundle.replace(/\\//g, '!')}.nls.json`).then(function (content) {\n\t\t\t\t\tconst json = JSON.parse(content);\n\t\t\t\t\tbundles[bundle] = json;\n\n\t\t\t\t\tcb(undefined, json);\n\t\t\t\t}).catch((error) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (nlsConfig._corruptedFile) {\n\t\t\t\t\t\t\tsafeWriteNlsFile(nlsConfig._corruptedFile, 'corrupted').catch(function (error) { console.error(error); });\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tcb(error, undefined);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\treturn nlsConfig;\n\t}\n\n\tfunction safeGlobals() {\n\t\tconst globals = (typeof self === 'object' ? self : typeof global === 'object' ? global : {});\n\n\t\treturn globals.vscode;\n\t}\n\n\t/**\n\t * @returns {NodeJS.Process | undefined}\n\t */\n\tfunction safeProcess() {\n\t\tif (typeof process !== 'undefined') {\n\t\t\treturn process; // Native environment (non-sandboxed)\n\t\t}\n\n\t\tconst globals = safeGlobals();\n\t\tif (globals) {\n\t\t\treturn globals.process; // Native environment (sandboxed)\n\t\t}\n\t}\n\n\t/**\n\t * @returns {Electron.IpcRenderer | undefined}\n\t */\n\tfunction safeIpcRenderer() {\n\t\tconst globals = safeGlobals();\n\t\tif (globals) {\n\t\t\treturn globals.ipcRenderer;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string[]} pathSegments\n\t * @returns {Promise<string>}\n\t */\n\tasync function safeReadNlsFile(...pathSegments) {\n\t\tconst ipcRenderer = safeIpcRenderer();\n\t\tif (ipcRenderer) {\n\t\t\treturn ipcRenderer.invoke('vscode:readNlsFile', ...pathSegments);\n\t\t}\n\n\t\tif (fs && path) {\n\t\t\treturn (await fs.promises.readFile(path.join(...pathSegments))).toString();\n\t\t}\n\n\t\tthrow new Error('Unsupported operation (read NLS files)');\n\t}\n\n\t/**\n\t * @param {string} path\n\t * @param {string} content\n\t * @returns {Promise<void>}\n\t */\n\tfunction safeWriteNlsFile(path, content) {\n\t\tconst ipcRenderer = safeIpcRenderer();\n\t\tif (ipcRenderer) {\n\t\t\treturn ipcRenderer.invoke('vscode:writeNlsFile', path, content);\n\t\t}\n\n\t\tif (fs) {\n\t\t\treturn fs.promises.writeFile(path, content);\n\t\t}\n\n\t\tthrow new Error('Unsupported operation (write NLS files)');\n\t}\n\n\t//#endregion\n\t\n\n\t//#region ApplicationInsights\n\n\t// Prevents appinsights from monkey patching modules.\n\t// This should be called before importing the applicationinsights module\n\tfunction avoidMonkeyPatchFromAppInsights() {\n\t\tif (typeof process === 'undefined') {\n\t\t\tconsole.warn('avoidMonkeyPatchFromAppInsights() is only available in node.js environments');\n\t\t\treturn;\n\t\t}\n\n\t\t// @ts-ignore\n\t\tprocess.env['APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL'] = true; // Skip monkey patching of 3rd party modules by appinsights\n\t\tglobal['diagnosticsSource'] = {}; // Prevents diagnostic channel (which patches \"require\") from initializing entirely\n\t}\n\n\t//#endregion\n\n\n\treturn {\n\t\tenableASARSupport,\n\t\tavoidMonkeyPatchFromAppInsights,\n\t\tsetupNLS,\n\t\tfileUriFromPath\n\t};\n}));\n"]}